/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  Nextflow config file for CBE (IMPIMBA)
 * -------------------------------------------------
 * Imported under the default 'standard' Nextflow
 * profile in nextflow.config
 */


singularity {
     enabled = true
}

process {
    container = 'gerlichlab/scshic_docker:release-1.0'
    executor = 'slurm'
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 40.GB * task.attempt, 'memory' ) }
    time = { check_max( 48.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'terminate' }
    maxRetries = 2
    maxErrors = '-1'
    clusterOptions = {
        if ( task.attempt == 1 ) {
            '--qos=medium'
        } else {
            '--qos=long'
        }
    }
    withName: 'bcl2fastq' {
        container = 'gerlichlab/bcl2fastq:latest'
        cpus = { check_max( 38, 'cpus' ) }
        memory = { check_max( 25.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=short' :  '--qos=medium' }
    }
    withName: 'fastqc' {
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 6.GB * task.attempt, 'memory' ) }
        time = { check_max( 16.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=medium' :  '--qos=long' }
    }
    withName: 'merge_lanes_R1' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=short' :  '--qos=medium' }
    }
    withName: 'merge_lanes_R2' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=short' :  '--qos=medium' }
    }
        withName: 'align_w_bwa' {
        cpus = { check_max( 38, 'cpus' ) }
        memory = { check_max( 80.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=medium' :  '--qos=long' }
    }
    withName: 'parse_pairs' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=short' :  '--qos=medium' }
    }
    withName: 'sort_pairs' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 30.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=short' :  '--qos=medium' }
    }
    withName: 'dedup_pairs' {
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=short' :  '--qos=medium' }
    }
    withName: 'detect_s4t' {
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 30.GB * task.attempt, 'memory' ) }
        time = { check_max( 15.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=medium' :  '--qos=long' }
    }
    withName: 'filter_cis_trans' {
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=short' :  '--qos=medium' }
    }
    withName: 'merge_trans_ref_comp' {
        cpus = { check_max( 10, 'cpus' ) }
        memory = { check_max( 5.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=short' :  '--qos=medium' }
    }
    withName: 'merge_cis_ref_comp' {
        cpus = { check_max( 10, 'cpus' ) }
        memory = { check_max( 5.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=short' :  '--qos=medium' }
    }
    withName: 'generate_cools' {
        cpus = { check_max( 14, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=short' :  '--qos=medium' }
    }
    withName: 'zoomify_and_balance' {
        cpus = { check_max( 38, 'cpus' ) }
        memory = { check_max( 15.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
        clusterOptions = { task.attempt == 1 ? '--qos=short' :  '--qos=medium' }
    }
}

// //for C2 nodes
params {
    // Defaults only, expecting to be overwritten
    max_memory = 140.GB
    max_cpus = 38
    max_time = 240.h
}
//for C1 nodes 
// params {
//     // Defaults only, expecting to be overwritten
//     max_memory = 80.GB
//     max_cpus = 22
//     max_time = 48.h
// }
